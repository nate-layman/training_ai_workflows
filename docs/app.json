[{"name":"app.R","content":"# training.R\nlibrary(shiny)\nlibrary(shinyjs)\nlibrary(glue)\n\n# Try to load text2vec, but don't fail if it's not available\ntext2vec_available <- requireNamespace(\"text2vec\", quietly = TRUE)\n\n#------------------------------------------\n# SVG brick generator\n#------------------------------------------\nlego_svg <- function(color) {\n  svg <- sprintf(\"\n    <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 90 90'>\n      <rect x='5.706' y='20.957' width='10.908' height='22.076' rx='2.767' fill='%s'/>\n      <rect x='28.546' y='20.957' width='10.908' height='22.076' rx='2.767' fill='%s'/>\n      <rect x='51.386' y='20.957' width='10.908' height='22.076' rx='2.767' fill='%s'/>\n      <rect x='74.226' y='20.957' width='10.908' height='22.076' rx='2.767' fill='%s'/>\n      <rect x='0.5' y='30.234' width='89' height='46.503' rx='2.905' fill='%s'/>\n    <\/svg>\", color, color, color, color, color)\n  paste0(\"data:image/svg+xml;utf8,\", URLencode(svg, reserved = TRUE))\n}\n\n#------------------------------------------\n# Base plate SVG (horizontal plate with studs)\n#------------------------------------------\nbase_plate_svg <- function() {\n  # Create a horizontal grey plate with multiple studs on top\n  # Similar proportions to brick but wider and with more studs\n  svg <- sprintf(\"\n    <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 360 60'>\n      <rect x='5.706' y='5' width='10.908' height='22.076' rx='2.767' fill='#666666'/>\n      <rect x='28.546' y='5' width='10.908' height='22.076' rx='2.767' fill='#666666'/>\n      <rect x='51.386' y='5' width='10.908' height='22.076' rx='2.767' fill='#666666'/>\n      <rect x='74.226' y='5' width='10.908' height='22.076' rx='2.767' fill='#666666'/>\n      <rect x='97.066' y='5' width='10.908' height='22.076' rx='2.767' fill='#666666'/>\n      <rect x='119.906' y='5' width='10.908' height='22.076' rx='2.767' fill='#666666'/>\n      <rect x='142.746' y='5' width='10.908' height='22.076' rx='2.767' fill='#666666'/>\n      <rect x='165.586' y='5' width='10.908' height='22.076' rx='2.767' fill='#666666'/>\n      <rect x='188.426' y='5' width='10.908' height='22.076' rx='2.767' fill='#666666'/>\n      <rect x='211.266' y='5' width='10.908' height='22.076' rx='2.767' fill='#666666'/>\n      <rect x='234.106' y='5' width='10.908' height='22.076' rx='2.767' fill='#666666'/>\n      <rect x='256.946' y='5' width='10.908' height='22.076' rx='2.767' fill='#666666'/>\n      <rect x='279.786' y='5' width='10.908' height='22.076' rx='2.767' fill='#666666'/>\n      <rect x='302.626' y='5' width='10.908' height='22.076' rx='2.767' fill='#666666'/>\n      <rect x='325.466' y='5' width='10.908' height='22.076' rx='2.767' fill='#666666'/>\n      <rect x='348.306' y='5' width='10.908' height='22.076' rx='2.767' fill='#666666'/>\n      <rect x='2' y='14.234' width='356' height='35' rx='2.905' fill='#666666'/>\n    <\/svg>\")\n  paste0(\"data:image/svg+xml;utf8,\", URLencode(svg, reserved = TRUE))\n}\n\n#------------------------------------------\n# UI\n#------------------------------------------\nui <- fluidPage(\n  useShinyjs(),\n  tags$head(\n    tags$script(HTML(\"\n      // Drag and drop functionality\n      document.addEventListener('DOMContentLoaded', function() {\n        Shiny.addCustomMessageHandler('setupDragDrop', function(message) {\n          setupDragAndDrop();\n        });\n      });\n\n      var dropHandlerAdded = false;\n      var poolDropHandlerAdded = false;\n\n      function setupDragAndDrop() {\n        const brickPool = document.getElementById('brick_pool');\n        const stackArea = document.getElementById('brick_stack');\n\n        // Setup drag for colored bricks in pool only\n        function setupBrickDrag() {\n          const bricks = document.querySelectorAll('.brick-pool .draggable-brick:not(.grey)');\n          bricks.forEach(function(brick) {\n            brick.style.cursor = 'move';\n            brick.setAttribute('draggable', 'true');\n            brick.addEventListener('dragstart', function(e) {\n              e.dataTransfer.effectAllowed = 'move';\n              e.dataTransfer.setData('brick-number', brick.getAttribute('data-number'));\n              e.dataTransfer.setData('source', 'pool');\n            });\n          });\n        }\n\n        // Setup click handlers for all pool bricks (only draggable-brick, not placeholders)\n        function setupBrickClick() {\n          const bricks = document.querySelectorAll('.brick-pool .draggable-brick');\n          bricks.forEach(function(brick) {\n            // Only add click handler if it has the draggable-brick class (not brick-placeholder)\n            if (!brick.classList.contains('brick-placeholder')) {\n              brick.style.cursor = 'pointer';\n              brick.addEventListener('click', function(e) {\n                const number = brick.getAttribute('data-number');\n                Shiny.setInputValue('clicked_brick', {number: parseInt(number), timestamp: Date.now()}, {priority: 'event'});\n              });\n            }\n          });\n        }\n\n        // Setup drag for top brick in stack (last one in DOM due to flex-reverse)\n        function setupStackDrag() {\n          const stackBricks = document.querySelectorAll('.stack-area .brick');\n          if (stackBricks.length > 0) {\n            const topBrick = stackBricks[stackBricks.length - 1]; // Last brick is visually on top\n            topBrick.style.cursor = 'move';\n            topBrick.setAttribute('draggable', 'true');\n            topBrick.addEventListener('dragstart', function(e) {\n              e.dataTransfer.effectAllowed = 'move';\n              e.dataTransfer.setData('brick-number', topBrick.getAttribute('data-number'));\n              e.dataTransfer.setData('source', 'stack');\n            });\n          }\n        }\n\n        // Only add drop handler to stack once\n        if (stackArea && !dropHandlerAdded) {\n          dropHandlerAdded = true;\n\n          stackArea.addEventListener('dragover', function(e) {\n            e.preventDefault();\n            e.dataTransfer.dropEffect = 'move';\n            this.classList.add('drag-over');\n          });\n\n          stackArea.addEventListener('dragleave', function(e) {\n            this.classList.remove('drag-over');\n          });\n\n          stackArea.addEventListener('drop', function(e) {\n            e.preventDefault();\n            this.classList.remove('drag-over');\n            const number = e.dataTransfer.getData('brick-number');\n            const source = e.dataTransfer.getData('source');\n            if (number && source === 'pool') {\n              Shiny.setInputValue('dropped_to_stack', {number: parseInt(number), timestamp: Date.now()}, {priority: 'event'});\n            }\n          });\n        }\n\n        // Only add drop handler to pool once\n        if (brickPool && !poolDropHandlerAdded) {\n          poolDropHandlerAdded = true;\n\n          brickPool.addEventListener('dragover', function(e) {\n            e.preventDefault();\n            e.dataTransfer.dropEffect = 'move';\n            this.classList.add('drag-over');\n          });\n\n          brickPool.addEventListener('dragleave', function(e) {\n            this.classList.remove('drag-over');\n          });\n\n          brickPool.addEventListener('drop', function(e) {\n            e.preventDefault();\n            this.classList.remove('drag-over');\n            const number = e.dataTransfer.getData('brick-number');\n            const source = e.dataTransfer.getData('source');\n            if (number && source === 'stack') {\n              Shiny.setInputValue('dropped_to_pool', {number: parseInt(number), timestamp: Date.now()}, {priority: 'event'});\n            }\n          });\n        }\n\n        setupBrickDrag();\n        setupBrickClick();\n        setupStackDrag();\n        setupHoverListeners();\n      }\n\n      function setupHoverListeners() {\n        const allBricks = document.querySelectorAll('.draggable-brick, .brick');\n        const statusBar = document.getElementById('status_bar');\n\n        allBricks.forEach(function(brick) {\n          brick.addEventListener('mouseenter', function() {\n            const tooltip = brick.getAttribute('data-tooltip');\n            if (tooltip && statusBar) {\n              statusBar.textContent = tooltip;\n\n              // Change color based on brick type\n              const classList = brick.classList;\n              if (classList.contains('extraction')) {\n                statusBar.style.backgroundColor = '#2196F3';\n              } else if (classList.contains('prompt')) {\n                statusBar.style.backgroundColor = '#4CAF50';\n              } else if (classList.contains('formatting')) {\n                statusBar.style.backgroundColor = '#FFC107';\n                statusBar.style.color = '#333';\n              } else {\n                statusBar.style.backgroundColor = '#999999';\n                statusBar.style.color = 'white';\n              }\n            }\n          });\n\n          brick.addEventListener('mouseleave', function() {\n            if (statusBar) {\n              statusBar.style.backgroundColor = '#333';\n              statusBar.style.color = 'white';\n              statusBar.textContent = 'Hover over a brick to see its details';\n            }\n          });\n        });\n      }\n\n      // Modal functions\n      function showModal(number) {\n        document.getElementById('brick_modal').style.display = 'block';\n      }\n\n      function closeModal() {\n        document.getElementById('brick_modal').style.display = 'none';\n      }\n\n      Shiny.addCustomMessageHandler('showModal', function(message) {\n        showModal();\n      });\n\n      Shiny.addCustomMessageHandler('closeModal', function(message) {\n        closeModal();\n      });\n\n      document.addEventListener('click', function(e) {\n        if (e.target.id === 'brick_modal') {\n          closeModal();\n        }\n        if (e.target.id === 'modal_update_brick') {\n          Shiny.setInputValue('save_brick_click', {timestamp: Date.now()}, {priority: 'event'});\n        }\n      });\n    \")),\n    tags$style(HTML(\n      glue(\"\n      body {{\n        background-color: #f5f5f5;\n        font-family: Arial, sans-serif;\n        user-select: none;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n      }}\n\n      .container-fluid {{\n        max-width: 1200px;\n        margin: 0 auto;\n        padding: 20px;\n      }}\n\n      .main-layout {{\n        display: flex;\n        gap: 20px;\n        align-items: flex-start;\n      }}\n\n      .left-side {{\n        flex: 1;\n      }}\n\n      .right-side {{\n        flex: 1;\n      }}\n\n      h2 {{\n        text-align: center;\n        color: #333;\n        margin-bottom: 30px;\n      }}\n\n      h3 {{\n        color: #333;\n        margin-bottom: 15px;\n        text-align: center;\n      }}\n\n      .draggable-brick, .brick {{\n        width: 180px;\n        height: 80px;\n        margin: 10px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        text-align: center;\n        color: white;\n        font-weight: bold;\n        font-size: 24px;\n        background-size: contain;\n        background-repeat: no-repeat;\n        background-position: center;\n        border: none;\n        position: relative;\n        transition: transform 0.1s;\n        line-height: 80px;\n        padding: 0;\n        padding-top: 15px;\n      }}\n\n      .draggable-brick.grey {{\n        background-image: url('{lego_svg(\\\"#999999\\\")}');\n      }}\n\n      .draggable-brick:not(.grey):hover, .brick:hover {{\n        transform: scale(1.05);\n      }}\n\n\n      .draggable-brick.grey:hover::after, .brick.grey:hover::after {{\n        background: rgba(153, 153, 153, 0.85);\n        color: white;\n      }}\n\n      .draggable-brick.extraction:hover::after, .brick.extraction:hover::after {{\n        background: rgba(33, 150, 243, 0.85);\n        color: white;\n      }}\n\n      .draggable-brick.prompt:hover::after, .brick.prompt:hover::after {{\n        background: rgba(76, 175, 80, 0.85);\n        color: white;\n      }}\n\n      .draggable-brick.formatting:hover::after, .brick.formatting:hover::after {{\n        background: rgba(255, 193, 7, 0.85);\n        color: black;\n      }}\n\n      .draggable-brick.extraction, .brick.extraction {{\n        background-image: url('{lego_svg(\\\"#2196F3\\\")}');\n      }}\n\n      .draggable-brick.prompt, .brick.prompt {{\n        background-image: url('{lego_svg(\\\"#4CAF50\\\")}');\n      }}\n\n      .draggable-brick.formatting, .brick.formatting {{\n        background-image: url('{lego_svg(\\\"#FFC107\\\")}');\n      }}\n\n      .stack-area {{\n        background: white;\n        border-radius: 10px;\n        padding: 20px;\n        height: 350px;\n        box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n        border: 3px dashed #ccc;\n        display: flex;\n        flex-direction: column-reverse;\n        align-items: center;\n        position: relative;\n      }}\n\n      .base-plate {{\n        width: 320px;\n        height: 40px;\n        background-size: contain;\n        background-repeat: no-repeat;\n        background-position: center;\n        position: absolute;\n        bottom: 20px;\n        left: 50%;\n        transform: translateX(-50%);\n        z-index: 0;\n      }}\n\n      .stack-area .brick {{\n        display: flex;\n        height: 80px;\n        z-index: 1;\n      }}\n\n      .stack-area .brick:not(:last-child) {{\n        margin-top: -52px;\n      }}\n\n      .stack-area .brick:last-child {{\n        z-index: 100;\n      }}\n\n      .stack-area.drag-over {{\n        border-color: #4CAF50;\n        background-color: #f0f8f0;\n      }}\n\n      .brick-pool {{\n        background: white;\n        border-radius: 10px;\n        padding: 20px;\n        height: 350px;\n        box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n        display: flex;\n        flex-wrap: wrap;\n        align-items: flex-start;\n        align-content: flex-start;\n        justify-content: center;\n      }}\n\n      .brick-pool .empty-message {{\n        padding: 30px;\n      }}\n\n      .brick-placeholder {{\n        width: 180px;\n        height: 80px;\n        background-size: contain;\n        background-repeat: no-repeat;\n        background-position: center;\n        background-image: url('{lego_svg(\\\"#cccccc\\\")}');\n        opacity: 0.3;\n        margin: 10px;\n        cursor: default;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        text-align: center;\n        color: #999999;\n        font-weight: bold;\n        font-size: 24px;\n        line-height: 80px;\n        padding-top: 15px;\n        position: relative;\n      }}\n\n      .brick-placeholder::after {{\n        content: attr(data-number);\n        font-size: 24px;\n        font-weight: bold;\n        color: #999999;\n      }}\n\n      .brick-pool.drag-over {{\n        background-color: #f0f8f0;\n      }}\n\n      .empty-message {{\n        text-align: center;\n        color: #999;\n        padding: 50px;\n        font-size: 18px;\n      }}\n\n      #status_bar {{\n        position: fixed;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        background-color: #333;\n        color: white;\n        padding: 15px 20px;\n        font-size: 16px;\n        z-index: 9999;\n        display: block;\n        box-shadow: 0 -2px 10px rgba(0,0,0,0.3);\n        transition: background-color 0.2s ease;\n      }}\n\n      /* Modal styles */\n      .modal {{\n        display: none;\n        position: fixed;\n        z-index: 10000;\n        left: 0;\n        top: 0;\n        width: 100%;\n        height: 100%;\n        background-color: rgba(0,0,0,0.4);\n      }}\n\n      .modal-content {{\n        background-color: white;\n        margin: 10% auto;\n        padding: 30px;\n        border-radius: 10px;\n        box-shadow: 0 4px 16px rgba(0,0,0,0.2);\n        width: 500px;\n        max-width: 90%;\n      }}\n\n\n      .modal-update-brick {{\n        width: 180px;\n        height: 80px;\n        margin: 20px auto;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        color: white;\n        font-weight: bold;\n        font-size: 20px;\n        background-size: contain;\n        background-repeat: no-repeat;\n        background-position: center;\n        line-height: 80px;\n        padding: 0;\n        padding-top: 15px;\n        cursor: pointer;\n        transition: transform 0.1s;\n        border: none;\n        background-color: transparent;\n      }}\n\n      .modal-update-brick:hover {{\n        transform: scale(1.05);\n      }}\n\n      .modal-update-brick:active {{\n        transform: scale(0.95);\n      }}\n\n      .modal-update-brick.grey {{\n        background-image: url('{lego_svg(\\\"#999999\\\")}');\n      }}\n\n      .modal-update-brick.extraction {{\n        background-image: url('{lego_svg(\\\"#2196F3\\\")}');\n      }}\n\n      .modal-update-brick.prompt {{\n        background-image: url('{lego_svg(\\\"#4CAF50\\\")}');\n      }}\n\n      .modal-update-brick.formatting {{\n        background-image: url('{lego_svg(\\\"#FFC107\\\")}');\n      }}\n      \")\n    ))\n  ),\n\n  div(class = \"container-fluid\",\n    h2(\"AI Workflow Builder\"),\n\n    div(class = \"main-layout\",\n      div(class = \"left-side\",\n        h3(\"Workflow Tower\"),\n        div(class = \"stack-area\", id = \"brick_stack\",\n          div(class = \"empty-message\", \"Drag bricks here to build your workflow.\")\n        )\n      ),\n\n      div(class = \"right-side\",\n        h3(\"Task Bricks\"),\n        div(class = \"brick-pool\", id = \"brick_pool\",\n          div(class = \"empty-message\", \"Loading bricks...\")\n        )\n      )\n    )\n  ),\n\n  # Modal for editing bricks\n  tags$div(id = \"brick_modal\", class = \"modal\",\n    tags$div(class = \"modal-content\",\n      h3(\"Configure Brick\"),\n      textAreaInput(\"modal_task_input\", \"AI Task Description:\",\n                   placeholder = \"Describe what this brick should do...\",\n                   rows = 4, width = \"100%\"),\n      tags$button(id = \"modal_update_brick\", class = \"modal-update-brick grey\", \"Update\")\n    )\n  ),\n\n  # Status bar\n  tags$div(id = \"status_bar\", \"Hover over a brick to see its details\")\n)\n\n#------------------------------------------\n# SERVER\n#------------------------------------------\nserver <- function(input, output, session) {\n  pool_bricks <- reactiveVal(list(\n    list(number = 1, type = \"grey\", text = \"\", id = \"1\"),\n    list(number = 2, type = \"grey\", text = \"\", id = \"2\"),\n    list(number = 3, type = \"grey\", text = \"\", id = \"3\"),\n    list(number = 4, type = \"grey\", text = \"\", id = \"4\"),\n    list(number = 5, type = \"grey\", text = \"\", id = \"5\")\n  ))\n  stack_bricks <- reactiveVal(list())\n  editing_brick <- reactiveVal(NULL)\n\n  # Pre-compute category vectors for semantic matching (only once at startup)\n  category_vectorizer <- NULL\n  category_dtm <- NULL\n\n  if (text2vec_available) {\n    tryCatch({\n      # Improved category descriptions focusing on core concepts and typical use cases\n      category_docs <- c(\n        extraction = \"extract pull get fetch retrieve collect gather read find locate search data information content from source database api web file scrape parse access obtain\",\n        prompt = \"generate create write ask prompt summarize analyze classify understand reason explain interpret evaluate assess transform process llm ai model question query instructions\",\n        formatting = \"format display output present show render arrange structure organize layout style export save convert serialize json csv html table prettify\"\n      )\n\n      # Pre-compute vocabulary and vectorizer\n      tokens <- text2vec::itoken(category_docs, preprocessor = tolower, tokenizer = text2vec::word_tokenizer)\n      vocab <- text2vec::create_vocabulary(tokens)\n      category_vectorizer <<- text2vec::vocab_vectorizer(vocab)\n      category_dtm <<- text2vec::create_dtm(tokens, category_vectorizer)\n    }, error = function(e) {\n      # Silently fail - will use keyword matching\n    })\n  }\n\n  # Optimized semantic matching function\n  detect_brick_type <- function(text) {\n    if (nchar(text) == 0) return(\"grey\")\n\n    text_lower <- tolower(text)\n\n    # Use pre-computed text2vec vectors if available\n    if (!is.null(category_vectorizer) && !is.null(category_dtm)) {\n      tryCatch({\n        # Create DTM for user input using pre-computed vectorizer\n        user_tokens <- text2vec::itoken(text_lower, preprocessor = tolower, tokenizer = text2vec::word_tokenizer)\n        user_dtm <- text2vec::create_dtm(user_tokens, category_vectorizer)\n\n        # Calculate cosine similarity (using raw term frequencies, not TF-IDF)\n        similarities <- c(\n          extraction = text2vec::sim2(user_dtm, category_dtm[1, , drop = FALSE], method = \"cosine\")[1,1],\n          prompt = text2vec::sim2(user_dtm, category_dtm[2, , drop = FALSE], method = \"cosine\")[1,1],\n          formatting = text2vec::sim2(user_dtm, category_dtm[3, , drop = FALSE], method = \"cosine\")[1,1]\n        )\n\n        # Return category with highest similarity (with reasonable threshold)\n        if (!all(is.na(similarities)) && max(similarities, na.rm = TRUE) > 0.15) {\n          return(names(which.max(similarities)))\n        }\n      }, error = function(e) {\n        # Fall through to keyword matching below\n      })\n    }\n\n    # Fallback to enhanced keyword matching with priority order\n    # Check extraction first (most specific)\n    if (grepl(\"extract|pull|fetch|retrieve|collect|gather|read|locate|search|find|scrape|parse|obtain|acquire|access|get.*from|pull.*out|take.*from|grab|capture\", text_lower)) {\n      return(\"extraction\")\n    }\n    # Check formatting second (also specific)\n    if (grepl(\"format|display|output|present|show|render|arrange|structure|organize|layout|style|export|save|convert|serialize|json|csv|html|table|prettify|print\", text_lower)) {\n      return(\"formatting\")\n    }\n    # Default to prompt/transformation for everything else\n    return(\"prompt\")\n  }\n\n  # Setup drag and drop on load\n  observe({\n    session$sendCustomMessage(\"setupDragDrop\", list())\n  })\n\n  # Handle brick click\n  observeEvent(input$clicked_brick, {\n    brick_num <- input$clicked_brick$number\n\n    # Find brick in pool by number property\n    pb <- pool_bricks()\n    brick_idx <- which(sapply(pb, function(b) b$number == brick_num))\n\n    if (length(brick_idx) > 0) {\n      brick <- pb[[brick_idx]]\n      editing_brick(brick_num)\n      updateTextAreaInput(session, \"modal_task_input\", value = brick$text)\n\n      # Update modal button\n      runjs(sprintf(\"\n        var btn = document.getElementById('modal_update_brick');\n        btn.className = 'modal-update-brick %s';\n      \", brick$type))\n\n      session$sendCustomMessage(\"showModal\", list())\n    }\n  })\n\n  # Update modal button color as user types\n  observeEvent(input$modal_task_input, {\n    if (!is.null(editing_brick())) {\n      new_text <- trimws(input$modal_task_input)\n      new_type <- if (nchar(new_text) == 0) {\n        \"grey\"\n      } else {\n        detect_brick_type(new_text)\n      }\n\n      runjs(sprintf(\"\n        var btn = document.getElementById('modal_update_brick');\n        btn.className = 'modal-update-brick %s';\n      \", new_type))\n    }\n  })\n\n  # Handle save brick\n  observeEvent(input$save_brick_click, {\n    brick_num <- editing_brick()\n    if (!is.null(brick_num)) {\n      new_text <- trimws(input$modal_task_input)\n\n      # If empty, turn back to grey\n      new_type <- if (nchar(new_text) == 0) {\n        \"grey\"\n      } else {\n        detect_brick_type(new_text)\n      }\n\n      # Update brick in pool by finding it by number property\n      pb <- pool_bricks()\n      if (length(pb) > 0) {\n        brick_idx <- which(sapply(pb, function(b) b$number == brick_num))\n        if (length(brick_idx) > 0) {\n          pb[[brick_idx]]$text <- new_text\n          pb[[brick_idx]]$type <- new_type\n          pool_bricks(pb)\n        }\n      }\n\n      # Also check and update in stack\n      sb <- stack_bricks()\n      if (length(sb) > 0) {\n        stack_idx <- which(sapply(sb, function(b) b$number == brick_num))\n        if (length(stack_idx) > 0) {\n          sb[[stack_idx]]$text <- new_text\n          sb[[stack_idx]]$type <- new_type\n          stack_bricks(sb)\n        }\n      }\n\n      editing_brick(NULL)\n      session$sendCustomMessage(\"closeModal\", list())\n    }\n  })\n\n  # Render pool bricks - always show 5 slots\n  observe({\n    pb <- pool_bricks()\n\n    # Create a list of 5 slots, some may be empty (placeholder)\n    html <- paste0(\n      sapply(1:5, function(slot_num) {\n        # Find brick with this number in pool\n        brick_idx <- which(sapply(pb, function(b) b$number == slot_num))\n\n        if (length(brick_idx) > 0) {\n          # Brick exists in pool - render it\n          brick <- pb[[brick_idx]]\n          tooltip <- if (brick$text == \"\") {\n            \"Click to add task description\"\n          } else {\n            type_name <- switch(brick$type,\n                              extraction = \"Extraction\",\n                              prompt = \"Transformation\",\n                              formatting = \"Formatting\",\n                              \"Not configured\")\n            paste0(type_name, \": \", brick$text)\n          }\n\n          sprintf(\"<div class='draggable-brick %s' data-number='%d' data-tooltip='%s'><\/div>\",\n                  brick$type,\n                  brick$number,\n                  gsub(\"'\", \"&apos;\", tooltip))\n        } else {\n          # Brick is in tower - render placeholder (number shown via ::after)\n          sprintf(\"<div class='brick-placeholder' data-number='%d'><\/div>\", slot_num)\n        }\n      }),\n      collapse = \"\"\n    )\n    runjs(sprintf(\"document.getElementById('brick_pool').innerHTML = `%s`; setupDragAndDrop();\", html))\n  })\n\n  # Handle brick dropped to stack (from pool)\n  observeEvent(input$dropped_to_stack, {\n    brick_num <- input$dropped_to_stack$number\n\n    # Find brick in pool by number property\n    pb <- pool_bricks()\n    brick_idx <- which(sapply(pb, function(b) b$number == brick_num))\n\n    if (length(brick_idx) > 0) {\n      brick <- pb[[brick_idx]]\n\n      # Only allow colored bricks (not grey)\n      if (brick$type != \"grey\") {\n        # Remove from pool\n        pool_bricks(pb[-brick_idx])\n\n        # Add to stack\n        stack_bricks(c(list(brick), stack_bricks()))\n      }\n    }\n  })\n\n  # Handle brick dropped to pool (from stack top)\n  observeEvent(input$dropped_to_pool, {\n    brick_num <- input$dropped_to_pool$number\n\n    # Remove top brick from stack\n    sb <- stack_bricks()\n    if (length(sb) > 0 && sb[[1]]$number == brick_num) {\n      stack_bricks(sb[-1])\n\n      # Add back to pool (each brick returns to its numbered slot)\n      pool_bricks(c(pool_bricks(), list(sb[[1]])))\n    }\n  })\n\n  # Render stack bricks\n  observe({\n    sb <- stack_bricks()\n\n    if (length(sb) == 0) {\n      html <- \"<div class='empty-message'>Drag bricks here to build your workflow.<\/div>\"\n    } else {\n      # Reverse order so newest (first in list) appears at top visually\n      indices <- rev(seq_along(sb))\n      html <- paste0(\n        sapply(seq_along(indices), function(i) {\n          idx <- indices[i]\n          # First brick in list (sb[[1]]) is the top brick\n          # It appears last in DOM due to reverse\n          is_top <- (idx == 1)\n\n          type_name <- switch(sb[[idx]]$type,\n                            extraction = \"Extraction\",\n                            prompt = \"Transformation\",\n                            formatting = \"Formatting\",\n                            \"\")\n          tooltip <- paste0(type_name, \": \", sb[[idx]]$text)\n\n          # All bricks use same classes now, overlapping handled by CSS\n          classes <- paste(c(\"brick\", sb[[idx]]$type), collapse = \" \")\n\n          sprintf(\"<div class='%s' data-number='%d' data-tooltip='%s'><\/div>\",\n                  classes,\n                  sb[[idx]]$number,\n                  gsub(\"'\", \"&apos;\", tooltip))\n        }),\n        collapse = \"\"\n      )\n    }\n    runjs(sprintf(\"document.getElementById('brick_stack').innerHTML = `%s`; setupDragAndDrop();\", html))\n  })\n\n}\n\n#------------------------------------------\n# RUN APP\n#------------------------------------------\nshinyApp(ui, server)\n","type":"text"}]
