[{"name":"app.R","content":"# training.R\nlibrary(shiny)\nlibrary(shinyjs)\nlibrary(glue)\n\n#------------------------------------------\n# Pure R implementation of text similarity (works in shinylive)\n#------------------------------------------\nsimple_tokenizer <- function(text) {\n  # Simple word tokenization - split on whitespace and punctuation\n  words <- tolower(text)\n  words <- gsub(\"[^a-z0-9 ]\", \" \", words)\n  words <- strsplit(words, \"\\\\s+\")[[1]]\n  words[words != \"\"]\n}\n\ncreate_simple_dtm <- function(texts, vocab = NULL) {\n  # Create document-term matrix\n  all_tokens <- lapply(texts, simple_tokenizer)\n\n  if (is.null(vocab)) {\n    vocab <- unique(unlist(all_tokens))\n  }\n\n  # Create matrix: rows = documents, columns = terms\n  dtm <- matrix(0, nrow = length(texts), ncol = length(vocab))\n  colnames(dtm) <- vocab\n\n  for (i in seq_along(texts)) {\n    tokens <- all_tokens[[i]]\n    for (token in tokens) {\n      if (token %in% vocab) {\n        dtm[i, token] <- dtm[i, token] + 1\n      }\n    }\n  }\n\n  dtm\n}\n\ncosine_similarity <- function(vec1, vec2) {\n  # Compute cosine similarity between two vectors\n  dot_product <- sum(vec1 * vec2)\n  norm1 <- sqrt(sum(vec1^2))\n  norm2 <- sqrt(sum(vec2^2))\n\n  if (norm1 == 0 || norm2 == 0) return(0)\n\n  dot_product / (norm1 * norm2)\n}\n\n#------------------------------------------\n# SVG brick generator\n#------------------------------------------\nlego_svg <- function(color) {\n  svg <- sprintf(\"\n    <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 90 90'>\n      <rect x='5.706' y='20.957' width='10.908' height='22.076' rx='2.767' fill='%s'/>\n      <rect x='28.546' y='20.957' width='10.908' height='22.076' rx='2.767' fill='%s'/>\n      <rect x='51.386' y='20.957' width='10.908' height='22.076' rx='2.767' fill='%s'/>\n      <rect x='74.226' y='20.957' width='10.908' height='22.076' rx='2.767' fill='%s'/>\n      <rect x='0.5' y='30.234' width='89' height='46.503' rx='2.905' fill='%s'/>\n    <\/svg>\", color, color, color, color, color)\n  paste0(\"data:image/svg+xml;utf8,\", URLencode(svg, reserved = TRUE))\n}\n\n#------------------------------------------\n# Base plate SVG (horizontal plate with studs)\n#------------------------------------------\nbase_plate_svg <- function() {\n  # Create a horizontal grey plate with multiple studs on top\n  # Similar proportions to brick but wider and with more studs\n  svg <- sprintf(\"\n    <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 360 60'>\n      <rect x='5.706' y='5' width='10.908' height='22.076' rx='2.767' fill='#666666'/>\n      <rect x='28.546' y='5' width='10.908' height='22.076' rx='2.767' fill='#666666'/>\n      <rect x='51.386' y='5' width='10.908' height='22.076' rx='2.767' fill='#666666'/>\n      <rect x='74.226' y='5' width='10.908' height='22.076' rx='2.767' fill='#666666'/>\n      <rect x='97.066' y='5' width='10.908' height='22.076' rx='2.767' fill='#666666'/>\n      <rect x='119.906' y='5' width='10.908' height='22.076' rx='2.767' fill='#666666'/>\n      <rect x='142.746' y='5' width='10.908' height='22.076' rx='2.767' fill='#666666'/>\n      <rect x='165.586' y='5' width='10.908' height='22.076' rx='2.767' fill='#666666'/>\n      <rect x='188.426' y='5' width='10.908' height='22.076' rx='2.767' fill='#666666'/>\n      <rect x='211.266' y='5' width='10.908' height='22.076' rx='2.767' fill='#666666'/>\n      <rect x='234.106' y='5' width='10.908' height='22.076' rx='2.767' fill='#666666'/>\n      <rect x='256.946' y='5' width='10.908' height='22.076' rx='2.767' fill='#666666'/>\n      <rect x='279.786' y='5' width='10.908' height='22.076' rx='2.767' fill='#666666'/>\n      <rect x='302.626' y='5' width='10.908' height='22.076' rx='2.767' fill='#666666'/>\n      <rect x='325.466' y='5' width='10.908' height='22.076' rx='2.767' fill='#666666'/>\n      <rect x='348.306' y='5' width='10.908' height='22.076' rx='2.767' fill='#666666'/>\n      <rect x='2' y='14.234' width='356' height='35' rx='2.905' fill='#666666'/>\n    <\/svg>\")\n  paste0(\"data:image/svg+xml;utf8,\", URLencode(svg, reserved = TRUE))\n}\n\n#------------------------------------------\n# UI\n#------------------------------------------\nui <- fluidPage(\n  useShinyjs(),\n  tags$head(\n    tags$script(HTML(\"\n      // Drag and drop functionality\n      document.addEventListener('DOMContentLoaded', function() {\n        Shiny.addCustomMessageHandler('setupDragDrop', function(message) {\n          setupDragAndDrop();\n        });\n      });\n\n      var dropHandlerAdded = false;\n      var poolDropHandlerAdded = false;\n\n      function setupDragAndDrop() {\n        const brickPool = document.getElementById('brick_pool');\n        const stackArea = document.getElementById('brick_stack');\n\n        // Setup drag for colored bricks in pool only\n        function setupBrickDrag() {\n          const bricks = document.querySelectorAll('.brick-pool .draggable-brick:not(.grey)');\n          bricks.forEach(function(brick) {\n            brick.style.cursor = 'move';\n            brick.setAttribute('draggable', 'true');\n            brick.addEventListener('dragstart', function(e) {\n              e.dataTransfer.effectAllowed = 'move';\n              e.dataTransfer.setData('brick-number', brick.getAttribute('data-number'));\n              e.dataTransfer.setData('source', 'pool');\n            });\n          });\n        }\n\n        // Setup click handlers for all bricks (pool and stack)\n        function setupBrickClick() {\n          // Handle pool bricks (only draggable-brick, not placeholders)\n          const poolBricks = document.querySelectorAll('.brick-pool .draggable-brick');\n          poolBricks.forEach(function(brick) {\n            // Only add click handler if it has the draggable-brick class (not brick-placeholder)\n            if (!brick.classList.contains('brick-placeholder')) {\n              brick.style.cursor = 'pointer';\n              brick.addEventListener('click', function(e) {\n                const number = brick.getAttribute('data-number');\n                Shiny.setInputValue('clicked_brick', {number: parseInt(number), timestamp: Date.now()}, {priority: 'event'});\n              });\n            }\n          });\n\n          // Handle stack bricks (in the tower)\n          const stackBricks = document.querySelectorAll('.stack-area .brick');\n          stackBricks.forEach(function(brick) {\n            brick.style.cursor = 'pointer';\n            brick.addEventListener('click', function(e) {\n              const number = brick.getAttribute('data-number');\n              Shiny.setInputValue('clicked_brick', {number: parseInt(number), timestamp: Date.now()}, {priority: 'event'});\n            });\n          });\n        }\n\n        // Setup drag for ALL bricks in stack\n        function setupStackDrag() {\n          const stackBricks = document.querySelectorAll('.stack-area .brick');\n          stackBricks.forEach(function(brick) {\n            brick.style.cursor = 'move';\n            brick.setAttribute('draggable', 'true');\n            brick.addEventListener('dragstart', function(e) {\n              e.dataTransfer.effectAllowed = 'move';\n              e.dataTransfer.setData('brick-number', brick.getAttribute('data-number'));\n              e.dataTransfer.setData('source', 'stack');\n            });\n          });\n        }\n\n        // Only add drop handler to stack once\n        if (stackArea && !dropHandlerAdded) {\n          dropHandlerAdded = true;\n\n          stackArea.addEventListener('dragover', function(e) {\n            e.preventDefault();\n            e.dataTransfer.dropEffect = 'move';\n            this.classList.add('drag-over');\n          });\n\n          stackArea.addEventListener('dragleave', function(e) {\n            this.classList.remove('drag-over');\n          });\n\n          stackArea.addEventListener('drop', function(e) {\n            e.preventDefault();\n            this.classList.remove('drag-over');\n            const number = e.dataTransfer.getData('brick-number');\n            const source = e.dataTransfer.getData('source');\n            if (number && source === 'pool') {\n              Shiny.setInputValue('dropped_to_stack', {number: parseInt(number), timestamp: Date.now()}, {priority: 'event'});\n            }\n          });\n        }\n\n        // Only add drop handler to pool once\n        if (brickPool && !poolDropHandlerAdded) {\n          poolDropHandlerAdded = true;\n\n          brickPool.addEventListener('dragover', function(e) {\n            e.preventDefault();\n            e.dataTransfer.dropEffect = 'move';\n            this.classList.add('drag-over');\n          });\n\n          brickPool.addEventListener('dragleave', function(e) {\n            this.classList.remove('drag-over');\n          });\n\n          brickPool.addEventListener('drop', function(e) {\n            e.preventDefault();\n            this.classList.remove('drag-over');\n            const number = e.dataTransfer.getData('brick-number');\n            const source = e.dataTransfer.getData('source');\n            if (number && source === 'stack') {\n              Shiny.setInputValue('dropped_to_pool', {number: parseInt(number), timestamp: Date.now()}, {priority: 'event'});\n            }\n          });\n        }\n\n        setupBrickDrag();\n        setupBrickClick();\n        setupStackDrag();\n        setupHoverListeners();\n      }\n\n      function setupHoverListeners() {\n        const allBricks = document.querySelectorAll('.draggable-brick, .brick');\n        const statusBar = document.getElementById('status_bar');\n\n        allBricks.forEach(function(brick) {\n          brick.addEventListener('mouseenter', function() {\n            const tooltip = brick.getAttribute('data-tooltip');\n            if (tooltip && statusBar) {\n              statusBar.textContent = tooltip;\n\n              // Change color based on brick type\n              const classList = brick.classList;\n              if (classList.contains('extraction')) {\n                statusBar.style.backgroundColor = '#2196F3';\n              } else if (classList.contains('prompt')) {\n                statusBar.style.backgroundColor = '#4CAF50';\n              } else if (classList.contains('formatting')) {\n                statusBar.style.backgroundColor = '#FFC107';\n                statusBar.style.color = '#333';\n              } else {\n                statusBar.style.backgroundColor = '#999999';\n                statusBar.style.color = 'white';\n              }\n            }\n          });\n\n          brick.addEventListener('mouseleave', function() {\n            if (statusBar) {\n              statusBar.style.backgroundColor = '#333';\n              statusBar.style.color = 'white';\n              statusBar.textContent = 'Hover over a brick to see its details';\n            }\n          });\n        });\n      }\n\n      // Modal functions\n      function showModal(number) {\n        document.getElementById('brick_modal').style.display = 'block';\n      }\n\n      function closeModal() {\n        document.getElementById('brick_modal').style.display = 'none';\n      }\n\n      Shiny.addCustomMessageHandler('showModal', function(message) {\n        showModal();\n      });\n\n      Shiny.addCustomMessageHandler('closeModal', function(message) {\n        closeModal();\n      });\n\n      document.addEventListener('click', function(e) {\n        if (e.target.id === 'brick_modal') {\n          closeModal();\n        }\n        if (e.target.id === 'modal_update_brick') {\n          Shiny.setInputValue('save_brick_click', {timestamp: Date.now()}, {priority: 'event'});\n        }\n      });\n    \")),\n    tags$style(HTML(\n      glue(\"\n      body {{\n        background-color: #f5f5f5;\n        font-family: Arial, sans-serif;\n        user-select: none;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n      }}\n\n      .container-fluid {{\n        max-width: 1200px;\n        margin: 0 auto;\n        padding: 20px;\n      }}\n\n      .main-layout {{\n        display: flex;\n        gap: 20px;\n        align-items: flex-start;\n      }}\n\n      .left-side {{\n        flex: 1;\n      }}\n\n      .right-side {{\n        flex: 1;\n      }}\n\n      h2 {{\n        text-align: center;\n        color: #333;\n        margin-bottom: 30px;\n      }}\n\n      h3 {{\n        color: #333;\n        margin-bottom: 15px;\n        text-align: center;\n      }}\n\n      .draggable-brick, .brick {{\n        width: 180px;\n        height: 80px;\n        margin: 10px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        text-align: center;\n        color: white;\n        font-weight: bold;\n        font-size: 24px;\n        background-size: contain;\n        background-repeat: no-repeat;\n        background-position: center;\n        border: none;\n        position: relative;\n        transition: transform 0.1s;\n        line-height: 80px;\n        padding: 0;\n        padding-top: 15px;\n      }}\n\n      .draggable-brick.grey {{\n        background-image: url('{lego_svg(\\\"#999999\\\")}');\n      }}\n\n      .draggable-brick:not(.grey):hover, .brick:hover {{\n        transform: scale(1.05);\n      }}\n\n\n      .draggable-brick.grey:hover::after, .brick.grey:hover::after {{\n        background: rgba(153, 153, 153, 0.85);\n        color: white;\n      }}\n\n      .draggable-brick.extraction:hover::after, .brick.extraction:hover::after {{\n        background: rgba(33, 150, 243, 0.85);\n        color: white;\n      }}\n\n      .draggable-brick.prompt:hover::after, .brick.prompt:hover::after {{\n        background: rgba(76, 175, 80, 0.85);\n        color: white;\n      }}\n\n      .draggable-brick.formatting:hover::after, .brick.formatting:hover::after {{\n        background: rgba(255, 193, 7, 0.85);\n        color: black;\n      }}\n\n      .draggable-brick.extraction, .brick.extraction {{\n        background-image: url('{lego_svg(\\\"#2196F3\\\")}');\n      }}\n\n      .draggable-brick.prompt, .brick.prompt {{\n        background-image: url('{lego_svg(\\\"#4CAF50\\\")}');\n      }}\n\n      .draggable-brick.formatting, .brick.formatting {{\n        background-image: url('{lego_svg(\\\"#FFC107\\\")}');\n      }}\n\n      .stack-area {{\n        background: white;\n        border-radius: 10px;\n        padding: 20px;\n        height: 350px;\n        box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n        display: flex;\n        flex-direction: column-reverse;\n        align-items: center;\n        position: relative;\n      }}\n\n      .base-plate {{\n        width: 320px;\n        height: 40px;\n        background-size: contain;\n        background-repeat: no-repeat;\n        background-position: center;\n        position: absolute;\n        bottom: 20px;\n        left: 50%;\n        transform: translateX(-50%);\n        z-index: 0;\n      }}\n\n      .stack-area .brick {{\n        display: flex;\n        height: 80px;\n        z-index: 1;\n      }}\n\n      .stack-area .brick:not(:last-child) {{\n        margin-top: -52px;\n      }}\n\n      .stack-area .brick:last-child {{\n        z-index: 100;\n      }}\n\n      .stack-area.drag-over {{\n        border-color: #4CAF50;\n        background-color: #f0f8f0;\n      }}\n\n      .brick-pool {{\n        background: white;\n        border-radius: 10px;\n        padding: 20px;\n        height: 350px;\n        box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n        display: flex;\n        flex-wrap: wrap;\n        align-items: flex-start;\n        align-content: flex-start;\n        justify-content: center;\n      }}\n\n      .brick-pool .empty-message {{\n        padding: 30px;\n      }}\n\n      .brick-placeholder {{\n        width: 180px;\n        height: 80px;\n        background-size: contain;\n        background-repeat: no-repeat;\n        background-position: center;\n        background-image: url('{lego_svg(\\\"#cccccc\\\")}');\n        opacity: 0.3;\n        margin: 10px;\n        cursor: default;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        text-align: center;\n        color: #999999;\n        font-weight: bold;\n        font-size: 24px;\n        line-height: 80px;\n        padding-top: 15px;\n        position: relative;\n      }}\n\n      .brick-placeholder::after {{\n        content: attr(data-number);\n        font-size: 24px;\n        font-weight: bold;\n        color: #999999;\n      }}\n\n      .brick-pool.drag-over {{\n        background-color: #f0f8f0;\n      }}\n\n      .empty-message {{\n        text-align: center;\n        color: #999;\n        padding: 50px;\n        font-size: 18px;\n      }}\n\n      #status_bar {{\n        position: fixed;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        background-color: #333;\n        color: white;\n        padding: 15px 20px;\n        font-size: 16px;\n        z-index: 9999;\n        display: block;\n        box-shadow: 0 -2px 10px rgba(0,0,0,0.3);\n        transition: background-color 0.2s ease;\n      }}\n\n      /* Modal styles */\n      .modal {{\n        display: none;\n        position: fixed;\n        z-index: 10000;\n        left: 0;\n        top: 0;\n        width: 100%;\n        height: 100%;\n        background-color: rgba(0,0,0,0.4);\n      }}\n\n      .modal-content {{\n        background-color: white;\n        margin: 10% auto;\n        padding: 30px;\n        border-radius: 10px;\n        box-shadow: 0 4px 16px rgba(0,0,0,0.2);\n        width: 500px;\n        max-width: 90%;\n      }}\n\n\n      .modal-update-brick {{\n        width: 180px;\n        height: 80px;\n        margin: 20px auto;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        color: white;\n        font-weight: bold;\n        font-size: 20px;\n        background-size: contain;\n        background-repeat: no-repeat;\n        background-position: center;\n        line-height: 80px;\n        padding: 0;\n        padding-top: 15px;\n        cursor: pointer;\n        transition: transform 0.1s;\n        border: none;\n        background-color: transparent;\n      }}\n\n      .modal-update-brick:hover {{\n        transform: scale(1.05);\n      }}\n\n      .modal-update-brick:active {{\n        transform: scale(0.95);\n      }}\n\n      .modal-update-brick.grey {{\n        background-image: url('{lego_svg(\\\"#999999\\\")}');\n      }}\n\n      .modal-update-brick.extraction {{\n        background-image: url('{lego_svg(\\\"#2196F3\\\")}');\n      }}\n\n      .modal-update-brick.prompt {{\n        background-image: url('{lego_svg(\\\"#4CAF50\\\")}');\n      }}\n\n      .modal-update-brick.formatting {{\n        background-image: url('{lego_svg(\\\"#FFC107\\\")}');\n      }}\n      \")\n    ))\n  ),\n\n  div(class = \"container-fluid\",\n    h2(\"AI Workflow Builder\"),\n\n    div(class = \"main-layout\",\n      div(class = \"left-side\",\n        h3(\"Workflow Tower\"),\n        div(class = \"stack-area\", id = \"brick_stack\",\n          div(class = \"empty-message\", \"Add descriptions and drag bricks here to build your workflow!\")\n        )\n      ),\n\n      div(class = \"right-side\",\n        h3(\"Task Bricks\"),\n        div(class = \"brick-pool\", id = \"brick_pool\",\n          div(class = \"empty-message\", \"Loading bricks...\")\n        )\n      )\n    )\n  ),\n\n  # Modal for editing bricks\n  tags$div(id = \"brick_modal\", class = \"modal\",\n    tags$div(class = \"modal-content\",\n      h3(\"Configure Brick\"),\n      textAreaInput(\"modal_task_input\", \"AI Task Description:\",\n                   placeholder = \"Describe what this brick should do...\",\n                   rows = 4, width = \"100%\"),\n      tags$button(id = \"modal_update_brick\", class = \"modal-update-brick grey\", \"Update\")\n    )\n  ),\n\n  # Status bar\n  tags$div(id = \"status_bar\", \"Hover over a brick to see its details\")\n)\n\n#------------------------------------------\n# Pre-compute category vectors (pure R, works everywhere)\n#------------------------------------------\n# Improved category descriptions focusing on core concepts and typical use cases\ncategory_docs <- c(\n  extraction = \"extract pull get fetch retrieve collect gather read find locate search discover identify data information content details value field element attribute property name names from source database api web file document scrape parse access obtain acquire mine harvest capture take grab pick select query lookup investigator pi\",\n  prompt = \"summarize condense analyze examine study check verify validate test compare contrast classify categorize tag label understand comprehend reason think explain describe interpret translate evaluate judge assess appraise critique review process manipulate work edit refine revise synthesize combine merge integrate rewrite paraphrase simplify clarify enhance improve strengthen ensure compliance requirements logic strength quality llm ai model gpt assistant bot agent question query request instruction task tell instruct direct command\",\n  formatting = \"generate create write produce compose draft author pen craft format display output present show render print arrange structure organize layout design style export save store convert transform serialize stringify encode json csv xml html email markdown table grid chart graph visualize prettify beautify clean normalize standardize package prepare finalize deliver spreadsheet report summary document letter memo acknowledgment narrative budget grant award timeline\"\n)\n\n# Pre-compute category DTM and vocabulary\ncategory_dtm <- create_simple_dtm(category_docs)\ncategory_vocab <- colnames(category_dtm)\n\ncat(\"Semantic matching initialized with\", length(category_vocab), \"vocabulary terms\\n\")\n\n#------------------------------------------\n# SERVER\n#------------------------------------------\nserver <- function(input, output, session) {\n  pool_bricks <- reactiveVal(list(\n    list(number = 1, type = \"grey\", text = \"\", id = \"1\"),\n    list(number = 2, type = \"grey\", text = \"\", id = \"2\"),\n    list(number = 3, type = \"grey\", text = \"\", id = \"3\"),\n    list(number = 4, type = \"grey\", text = \"\", id = \"4\"),\n    list(number = 5, type = \"grey\", text = \"\", id = \"5\")\n  ))\n  stack_bricks <- reactiveVal(list())\n  editing_brick <- reactiveVal(NULL)\n\n  # Pure R semantic matching function (works everywhere including shinylive)\n  detect_brick_type <- function(text) {\n    if (nchar(text) == 0) return(\"grey\")\n\n    # Create DTM for user input using pre-computed vocabulary\n    user_dtm <- create_simple_dtm(text, vocab = category_vocab)\n\n    # Calculate cosine similarity with each category\n    similarities <- c(\n      extraction = cosine_similarity(user_dtm[1,], category_dtm[1,]),\n      prompt = cosine_similarity(user_dtm[1,], category_dtm[2,]),\n      formatting = cosine_similarity(user_dtm[1,], category_dtm[3,])\n    )\n\n    # Return category with highest similarity (always pick the best match)\n    if (all(similarities == 0)) {\n      # If no word overlap, default to prompt\n      return(\"prompt\")\n    }\n\n    names(which.max(similarities))\n  }\n\n  # Setup drag and drop on load\n  observe({\n    session$sendCustomMessage(\"setupDragDrop\", list())\n  })\n\n  # Handle brick click\n  observeEvent(input$clicked_brick, {\n    brick_num <- input$clicked_brick$number\n\n    # Find brick in pool by number property\n    pb <- pool_bricks()\n    brick_idx <- which(sapply(pb, function(b) b$number == brick_num))\n\n    if (length(brick_idx) > 0) {\n      brick <- pb[[brick_idx]]\n      editing_brick(brick_num)\n      updateTextAreaInput(session, \"modal_task_input\", value = brick$text)\n\n      # Update modal button\n      runjs(sprintf(\"\n        var btn = document.getElementById('modal_update_brick');\n        btn.className = 'modal-update-brick %s';\n      \", brick$type))\n\n      session$sendCustomMessage(\"showModal\", list())\n    }\n  })\n\n  # Update modal button color as user types\n  observeEvent(input$modal_task_input, {\n    if (!is.null(editing_brick())) {\n      new_text <- trimws(input$modal_task_input)\n      new_type <- if (nchar(new_text) == 0) {\n        \"grey\"\n      } else {\n        detect_brick_type(new_text)\n      }\n\n      runjs(sprintf(\"\n        var btn = document.getElementById('modal_update_brick');\n        btn.className = 'modal-update-brick %s';\n      \", new_type))\n    }\n  })\n\n  # Handle save brick\n  observeEvent(input$save_brick_click, {\n    brick_num <- editing_brick()\n    if (!is.null(brick_num)) {\n      new_text <- trimws(input$modal_task_input)\n\n      # If empty, turn back to grey\n      new_type <- if (nchar(new_text) == 0) {\n        \"grey\"\n      } else {\n        detect_brick_type(new_text)\n      }\n\n      # Update brick in pool by finding it by number property\n      pb <- pool_bricks()\n      if (length(pb) > 0) {\n        brick_idx <- which(sapply(pb, function(b) b$number == brick_num))\n        if (length(brick_idx) > 0) {\n          pb[[brick_idx]]$text <- new_text\n          pb[[brick_idx]]$type <- new_type\n          pool_bricks(pb)\n        }\n      }\n\n      # Also check and update in stack\n      sb <- stack_bricks()\n      if (length(sb) > 0) {\n        stack_idx <- which(sapply(sb, function(b) b$number == brick_num))\n        if (length(stack_idx) > 0) {\n          sb[[stack_idx]]$text <- new_text\n          sb[[stack_idx]]$type <- new_type\n          stack_bricks(sb)\n        }\n      }\n\n      editing_brick(NULL)\n      session$sendCustomMessage(\"closeModal\", list())\n    }\n  })\n\n  # Render pool bricks - always show 5 slots\n  observe({\n    pb <- pool_bricks()\n\n    # Create a list of 5 slots, some may be empty (placeholder)\n    html <- paste0(\n      sapply(1:5, function(slot_num) {\n        # Find brick with this number in pool\n        brick_idx <- which(sapply(pb, function(b) b$number == slot_num))\n\n        if (length(brick_idx) > 0) {\n          # Brick exists in pool - render it\n          brick <- pb[[brick_idx]]\n          tooltip <- if (brick$text == \"\") {\n            \"Click to add task description\"\n          } else {\n            type_name <- switch(brick$type,\n                              extraction = \"Extraction\",\n                              prompt = \"Transformation\",\n                              formatting = \"Formatting\",\n                              \"Not configured\")\n            paste0(type_name, \": \", brick$text)\n          }\n\n          sprintf(\"<div class='draggable-brick %s' data-number='%d' data-tooltip='%s'><\/div>\",\n                  brick$type,\n                  brick$number,\n                  gsub(\"'\", \"&apos;\", tooltip))\n        } else {\n          # Brick is in tower - render placeholder (number shown via ::after)\n          sprintf(\"<div class='brick-placeholder' data-number='%d'><\/div>\", slot_num)\n        }\n      }),\n      collapse = \"\"\n    )\n    runjs(sprintf(\"document.getElementById('brick_pool').innerHTML = `%s`; setupDragAndDrop();\", html))\n  })\n\n  # Handle brick dropped to stack (from pool)\n  observeEvent(input$dropped_to_stack, {\n    brick_num <- input$dropped_to_stack$number\n\n    # Find brick in pool by number property\n    pb <- pool_bricks()\n    brick_idx <- which(sapply(pb, function(b) b$number == brick_num))\n\n    if (length(brick_idx) > 0) {\n      brick <- pb[[brick_idx]]\n\n      # Only allow colored bricks (not grey)\n      if (brick$type != \"grey\") {\n        # Remove from pool\n        pool_bricks(pb[-brick_idx])\n\n        # Add to stack\n        stack_bricks(c(list(brick), stack_bricks()))\n      }\n    }\n  })\n\n  # Handle brick dropped to pool (from anywhere in stack)\n  observeEvent(input$dropped_to_pool, {\n    brick_num <- input$dropped_to_pool$number\n\n    # Find and remove the brick from stack by its number\n    sb <- stack_bricks()\n    brick_idx <- which(sapply(sb, function(b) b$number == brick_num))\n\n    if (length(brick_idx) > 0) {\n      removed_brick <- sb[[brick_idx]]\n\n      # Remove from stack\n      stack_bricks(sb[-brick_idx])\n\n      # Add back to pool (each brick returns to its numbered slot)\n      pool_bricks(c(pool_bricks(), list(removed_brick)))\n    }\n  })\n\n  # Render stack bricks\n  observe({\n    sb <- stack_bricks()\n\n    if (length(sb) == 0) {\n      html <- \"<div class='empty-message'>Drag bricks here to build your workflow.<\/div>\"\n    } else {\n      # Reverse order so newest (first in list) appears at top visually\n      indices <- rev(seq_along(sb))\n      html <- paste0(\n        sapply(seq_along(indices), function(i) {\n          idx <- indices[i]\n          # First brick in list (sb[[1]]) is the top brick\n          # It appears last in DOM due to reverse\n          is_top <- (idx == 1)\n\n          type_name <- switch(sb[[idx]]$type,\n                            extraction = \"Extraction\",\n                            prompt = \"Transformation\",\n                            formatting = \"Formatting\",\n                            \"\")\n          tooltip <- paste0(type_name, \": \", sb[[idx]]$text)\n\n          # All bricks use same classes now, overlapping handled by CSS\n          classes <- paste(c(\"brick\", sb[[idx]]$type), collapse = \" \")\n\n          sprintf(\"<div class='%s' data-number='%d' data-tooltip='%s'><\/div>\",\n                  classes,\n                  sb[[idx]]$number,\n                  gsub(\"'\", \"&apos;\", tooltip))\n        }),\n        collapse = \"\"\n      )\n    }\n    runjs(sprintf(\"document.getElementById('brick_stack').innerHTML = `%s`; setupDragAndDrop();\", html))\n  })\n\n}\n\n#------------------------------------------\n# RUN APP\n#------------------------------------------\nshinyApp(ui, server)\n","type":"text"}]
